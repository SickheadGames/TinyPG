//@TinyPG - a Tiny Parser Generator v1.2
//Copyright Â© Herre Kuijpers 2008-2010
//Simple expression calculator
<% @TinyPG Language="C#" OutputPath="TinyPG\" %>

// include text highlighting as part of the input window
<% @TextHighlighter Generate="true" %>

<% @ParseTree CustomCode="
		protected System.Collections.Generic.Dictionary<string,int> context;
		public System.Collections.Generic.Dictionary<string,int> Context
		{
			get
			{
				if(context == null && this.Parent != null) {
					return Parent.Context;
				}
				return null;
			}
			set
			{
				context = value;
			}
		}

		public int GetVarValue(string id)
		{
			return Context == null?0:Context[id];
		}
" %>

			EOF         	-> @"^\s*$";
[Color(255, 0, 0)] 	NUMBER 	-> @"[0-9]+";
[Color(255, 0, 0)] 	ID	 	-> @"[a-zA-Z_][a-zA-Z0-9_]*";
[Color(0, 0, 255)] 	PLUSMINUS 	-> @"(\+|-)";
[Color(0, 0, 255)] 	MULTDIV 	-> @"\*|/";
[Color(0, 0, 255)] 	BROPEN 	->  @"\(";
[Color(0, 0, 255)] 	BRCLOSE 	->  @"\)";

[Skip] 		WHITESPACE  	-> @"\s+";

Start -> (AddExpr)? EOF
{ return $AddExpr; };      

AddExpr -> MultExpr (PLUSMINUS MultExpr)*
{ 
	int Value = Convert.ToInt32($MultExpr);
	int i = 1;
	while ($MultExpr[i] != null)
	{
		string sign = $PLUSMINUS[i-1].ToString();
		if (sign == "+")
			Value += Convert.ToInt32($MultExpr[i++]);
		else 
			Value -= Convert.ToInt32($MultExpr[i++]);
	}

	return Value; 
};

MultExpr -> Atom (MULTDIV Atom)*
{ 
	int Value = Convert.ToInt32($Atom);
	int i = 1;
	while ($Atom[i] != null)
	{
		string sign = $MULTDIV[i-1].ToString();
		if (sign == "*")
			Value *= Convert.ToInt32($Atom[i++]);
		else 
			Value /= Convert.ToInt32($Atom[i++]);
	}
	return Value; 
};

Atom -> NUMBER | BROPEN AddExpr BRCLOSE | ID
{
	if ($NUMBER != null) return $NUMBER;
	if ($ID != null) return GetVarValue($ID.ToString());
	else return $AddExpr; 
};

